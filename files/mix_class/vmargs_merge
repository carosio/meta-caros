#!/bin/zsh
#
#This script needs access to the following environment variables:
#
#> VMARGS_CONFIG_PATH  (ini style config file)
#> TPOSS_APP_NAME  (must be present as a section in VMARGS_CONFIG_PATH)
#
#The config file needs at least the [GLOBAL] section with a cookie
#parameter.
#
#Capitalization in the TPOSS_APP_NAME is not important but it may NOT
#be divided by spaces. An APP_NAME corresponds to a section name
#in the config.
#Several flags will be generated from the config file and merged
#with REL_VMARGS_PATH into the final VMARGS_PATH file.
#Flags from the REL_VMARGS_PATH will be commented out if
#already present in the config.
#
#At the moment the following flags are considered:
#> -sname or "node_name" in the config
#> -setcookie or "cookie" in the config
#
#The config and this script can be easily extended to further
#options.

echo "Merging vm.args with options from config file $VMARGS_CONFIG_PATH."

#if we have no config we just use the vm.args file generated by exrm
#in the release process and return back to the parent script.
if [ ! -f "$VMARGS_CONFIG_PATH" ]; then
    echo "No config file found at $VMARGS_CONFIG_PATH, merging aborted."
    cp "$RELEASE_CONFIG_DIR/vm.args" "$GENERATED_CONFIG_DIR/vm.args"
    return 0
fi

#path to exrm vm.args which is usually copied into running-dir
REL_VMARGS_PATH="$RELEASE_CONFIG_DIR/vm.args"

#temporary file for modifications
TMP_VMARGS_PATH="$GENERATED_CONFIG_DIR/_vm.args"
cp $REL_VMARGS_PATH $TMP_VMARGS_PATH

typeset -A cookie
typeset -A node_name

#normalize to lower case
TPOSS_APP_NAME=$(echo $TPOSS_APP_NAME | awk '{print tolower($0)}')

while IFS='= ' read opt val
do
    #this is a section
    if echo $opt | grep -q '\[*\]'
    then
	#the section will also be normalized to lower case
        section=$(echo "$(echo $opt | tr -d '[]')" \
		| awk '{print tolower($0)}')
    #this is an option in a section
    elif [[ $val ]]
    then
	eval "${opt}[${section}]=${val}"
    fi
done < $VMARGS_CONFIG_PATH

#optional parameters are validated here
#possible options are (until now): cookie, node_name

#set global values if not set in app specific sections
if [ $+cookie[$TPOSS_APP_NAME] = 0 ]
then
    cookie[$TPOSS_APP_NAME]=${cookie[global]}
fi

GENERATED_FLAGS_PREFIX="
#################################################################
## This part of vm.args is auto-generated based
## on $VMARGS_CONFIG_PATH.
#################################################################
"

if [ $+node_name[$TPOSS_APP_NAME] != 0 ]
then
    NODE_NAME_FLAG=\
"## node name
-sname ${node_name[$TPOSS_APP_NAME]}"
    #comment out old flags, short and long names
    sed -i -e '/-sname/s/^/## removed: /' $TMP_VMARGS_PATH
    sed -i -e '/-name/s/^/## removed: /' $TMP_VMARGS_PATH
else
    NODE_NAME_FLAG="## no node name given in config file, option not considered"
fi

if [ $+cookie[$TPOSS_APP_NAME] != 0 ]
then
    COOKIE_FLAG=\
"## set cookie content
-setcookie ${cookie[$TPOSS_APP_NAME]}"
    #comment out old flags
    sed -i -e '/-setcookie/s/^/## removed: /' $TMP_VMARGS_PATH
else
    COOKIE_FLAG="## no cookie given in config file, option not considered"
fi

GENERATED_FLAGS_BODY="
"$NODE_NAME_FLAG"

"$COOKIE_FLAG"
"

GENERATED_FLAGS_SUFFIX="
#################################################################
## The following part is the vm.args file generated in the
## release process. Some flags might be commented out to prevent
## multiple occurrences of the same flags.
#################################################################
"

#write the new vm.args e.g. into 'running-config'
(echo "$GENERATED_FLAGS_PREFIX $GENERATED_FLAGS_BODY $GENERATED_FLAGS_SUFFIX"; \
cat $TMP_VMARGS_PATH) > $VMARGS_PATH

#some cleanup
rm $TMP_VMARGS_PATH

echo "Merging vm.args with $RELEASE_CONFIG_DIR finished successfully."

